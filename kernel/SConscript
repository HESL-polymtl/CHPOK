#******************************************************************
#
# Institute for System Programming of the Russian Academy of Sciences
# Copyright (C) 2016 ISPRAS
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, Version 3.
#
# This program is distributed in the hope # that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the GNU General Public License version 3 for more details.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Import('env')

kernel_env = env.Clone()
kernel_env.Append(CFLAGS = ' -Werror')

if 'CFLAGS_KERNEL' in kernel_env:
    kernel_env.Append(CFLAGS = ' ' + kernel_env['CFLAGS_KERNEL'])

kernel_env['CPPPATH'] = kernel_env['KERNEL_CPPPATH']

if kernel_env.get('jdeveloper'):
    # Set base dir for reference in generated files
    kernel_env['SOURCE_BASE_DIR'] = kernel_env['POK_PATH']

Export('kernel_env')

core = SConscript('core/SConscript')
libc = SConscript('libc/SConscript')
arch = SConscript('arch/SConscript')

kernel_objects=[core, libc, arch]

kernel_core_target = kernel_env.Program(target = 'core.lo', source = kernel_objects)

if kernel_env.get('jdeveloper'):
    import sys
    import os
    sys.path.insert(1, os.path.join(os.environ["POK_PATH"], "misc"))
    import template_generation
    AddMethod(kernel_env, template_generation.BuildSyscallDefinition)

    source_dir = kernel_env['POK_PATH'] + 'kernel/include/uapi/'
    target_dir = kernel_env['POK_PATH'] + 'kernel/include/uapi/'

    (uapi_headers, uapi_headers_syscall) = SConscript(source_dir + 'SConscript')

    kernel_env.Replace(
        SOURCE_BASE_DIR = kernel_env['POK_PATH'],
        GENERATE_TITLE = template_generation.generate_title_c
    )

    # <source-dir> and <target-dir> are the same.
    #
    # No needs to simply copy files. Only files generation takes a place.
    kernel_syscall_headers = []
    for uapi_header_syscall in uapi_headers_syscall:
        kernel_syscall_headers.extend(kernel_env.BuildSyscallDefinition(
            target = target_dir + uapi_header_syscall,
            source = source_dir + uapi_header_syscall + '.in',
            template_main = 'syscall_declarations_kernel',
            template_dir = kernel_env['POK_PATH'] + '/misc/templates'))

    kernel_env.Depends('regenerate', kernel_syscall_headers)

Return('kernel_core_target')
# EOF
