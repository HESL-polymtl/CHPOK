#******************************************************************
#
# Institute for System Programming of the Russian Academy of Sciences
# Copyright (C) 2016 ISPRAS
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, Version 3.
#
# This program is distributed in the hope # that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the GNU General Public License version 3 for more details.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Import('kernel_env')

if kernel_env.get('jdeveloper'):
    # Set base dir for reference in generated files
    kernel_env['SOURCE_BASE_DIR'] = kernel_env['JETOS_HOME']

Export('kernel_env')

core = SConscript('core/SConscript')
libc = SConscript('libc/SConscript')
arch = SConscript('arch/SConscript')
bsp_objects = SConscript(kernel_env['JETOS_HOME'] + '/boards/SConscript',
        variant_dir = 'boards',
        duplicate = 0
)

kernel_objects=[core, libc, arch, bsp_objects]

if kernel_env.get('kerneltests'):
    import os
    jetos_unittests = os.environ.get('JETOS_UNITTESTS', '')
    kernel_env.Append(CPPPATH = jetos_unittests + '/unity/')
    kernel_env.Append(CFLAGS = ' -DKERNEL_UNITTESTS')

    tests = SConscript(Dir('#').abspath + '/P1/test/SConscript',
        variant_dir = 'tests',
        duplicate = 0
    )

    unity = SConscript(jetos_unittests + '/unity/SConscript',
        variant_dir = 'unity',
        duplicate = 0
    )

    kernel_objects.extend([tests, unity])

kernel_target = kernel_env.StaticLibrary(target = 'kernel',
    source = kernel_objects)

if kernel_env.get('jdeveloper'):
    import sys
    import os
    sys.path.insert(1, os.path.join(os.environ["JETOS_HOME"], "misc"))
    import template_generation
    AddMethod(kernel_env, template_generation.BuildSyscallDefinition)

    source_dir = kernel_env['JETOS_HOME'] + '/kernel/include/uapi/'
    target_dir = kernel_env['JETOS_HOME'] + '/kernel/include/uapi/'

    (uapi_headers, uapi_headers_syscall) = SConscript(source_dir + 'SConscript')

    # <source-dir> and <target-dir> are the same.
    #
    # No needs to simply copy files. Only files generation takes a place.
    kernel_syscall_headers = []
    for uapi_header_syscall in uapi_headers_syscall:
        kernel_syscall_headers.extend(kernel_env.BuildSyscallDefinition(
            target = target_dir + uapi_header_syscall,
            source = source_dir + uapi_header_syscall + '.in',
            template_file = kernel_env['JETOS_HOME'] + '/misc/templates/syscall_declarations_kernel.tpl',
            title = template_generation.generate_title_c))

    kernel_env.Depends('regenerate', kernel_syscall_headers)

Return('kernel_target')
# EOF
