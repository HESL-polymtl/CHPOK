LAW (local access windows):
         law[0 ] BAR=0:eff00000  ARn=81f00013 (size=0x8000,     eLBC)
         law[1 ] BAR=0:c0000000  ARn=81f0001c (size=0x10000000, eLBC)
         law[2 ] BAR=0:f4000000  ARn=81800014 (size=0x100000,   buffer manager)
         law[3 ] BAR=0:f4200000  ARn=83c00014 (size=0x100000,   queue manager)
         law[4 ] BAR=0:ffef0000  ARn=81f0000f (size=0x8000,     LBC)
         law[5 ] BAR=0:f0000000  ARn=81d00018 (size=0x1000000,  CSR (debug))
         law[6 ] BAR=0:80000000  ARn=8000001c (size=0x10000000, PCI Express 1)
         law[7 ] BAR=0:f8000000  ARn=8000000f (size=0x8000,     PCI Express 1)
         law[8 ] BAR=0:a0000000  ARn=8010001c (size=0x10000000, PCI Express 2)
         law[9 ] BAR=0:f8010000  ARn=8010000f (size=0x8000,     PCI Express 2)
         law[31] BAR=0:0         ARn=8100001d (size=0x20000000, Memory controller)


Simple example of code to print LAW
struct LAW_regs {
    uint32_t barh;
    uint32_t barl;
    uint32_t ar;
    uint32_t pad;
};
void LAW_list()
{
    struct LAW_regs *law = (struct LAW_regs *)(ccsrbar_vaddr + 0xC00);
    for (int i = 0; i < 32; i++) {
        printf("\t law %d  %lx:%lx [ar = %lx]\n", i,
                law[i].barh,
                law[i].barl,
                law[i].ar);
    }
}


PCI ATMU:
   outbound windows:
         window 0   0 -> 0:0 [80044023] (size 0x100000)
         window 1   80000 -> 0:80000 [8004401c] (size 0x20000000, MEM)
         window 2   f8000 -> 0:0 [8008800f] (size 0x10000, IO)
         window 3   0 -> 0:0 [0] // disabled
         window 4   0 -> 0:0 [44023] // disabled
   MSI window
         window fe000 -> 0:0 [e44017]  // disabled
   inbound windows:
         window 0   0 -> 0:0 [20f44023] // disabled
         window 1   0 -> 0:0 [20f44023]  // disabled
         window 2   0 -> 0:0 [a0f5501d]  //(prefetchable, size 0x40000000)
         window 3   fe000 -> 0:0 [80e44017] //(size 0x1000000)

PCI ATMU2:
   outbound windows:
         window 0   0 -> 0:0 [80044023]
         window 1   a0000 -> 0:a0000 [8004401c]
         window 2   f8010 -> 0:0 [8008800f]
         window 3   0 -> 0:0 [0]
         window 4   0 -> 0:0 [44023]
   MSI window
         window fe000 -> 0:0 [e44017]
   inbound windows:
         window 0   0 -> 0:0 [20f44023]
         window 1   0 -> 0:0 [20f44023]
         window 2   0 -> 0:0 [a0f5501d]
         window 3   fe000 -> 0:0 [80e44017]


DCFG registers value
====== DCFG ==========
DCFG_PORSR1 = 0x81fbff02
DCFG_PORSR2 = 0xf0000000
DCFG_GPPORCR1 = 0xff7f0000
DCFG_DEVDISR1 = 0x3600a000
DCFG_DEVDISR2 = 0x41080000
DCFG_COREDISR = 0x0
DCFG_PVR = 0x80230022
DCFG_SVR = 0x82110311
DCFG_RSTCR = 0x0
DCFG_RSTRQPBLSR = 0x0
DCFG_RSTRQMR1 = 0x0
DCFG_RSTRQSR1 = 0x0
DCFG_RSTRQWDTMR = 0x0
DCFG_RSTRQWDTSR = 0x0
DCFG_BRR = 0xf
DCFG_RCWSR1 = 0x50600000
DCFG_RCWSR2 = 0x0
DCFG_RCWSR3 = 0x20580000
DCFG_RCWSR4 = 0x0
DCFG_RCWSR5 = 0x44808c00
DCFG_RCWSR6 = 0xc3402000
DCFG_RCWSR7 = 0x1e800000
DCFG_RCWSR8 = 0x41000000
DCFG_RCWSR9 = 0x0
DCFG_RCWSR10 = 0x0
DCFG_RCWSR11 = 0x0
DCFG_RCWSR12 = 0xd0df0000
DCFG_RCWSR13 = 0x90000000
DCFG_RCWSR14 = 0x0
DCFG_RCWSR15 = 0x0
DCFG_RCWSR16 = 0x0
DCFG_SCRATCHRW1 = 0x0
DCFG_SCRATCHRW2 = 0x0
DCFG_SCRATCHRW3 = 0x0
DCFG_SCRATCHRW4 = 0x0
DCFG_SCRATCHW1R1 = 0x0
DCFG_SCRATCHW1R2 = 0x0
DCFG_SCRATCHW1R3 = 0x0
DCFG_SCRATCHW1R4 = 0x0
DCFG_CRSTSR0 = 0x8001
DCFG_CRSTSR1 = 0x8001
DCFG_CRSTSR2 = 0x8001
DCFG_CRSTSR3 = 0x8001
DCFG_PEX1LIODNR = 0xc1
DCFG_PEX2LIODNR = 0xc2
DCFG_PEX3LIODNR = 0xc3
DCFG_PEX4LIODNR = 0xc4
DCFG_RIO1LIODNR = 0xc7
DCFG_RIO2LIODNR = 0xc8
DCFG_USB1LIODNR = 0x7d
DCFG_USB2LIODNR = 0x7e
DCFG_eSDHCLIODNR = 0x40
DCFG_RIO1MAINTLIODNR = 0xc9
DCFG_RIO2MAINTLIODNR = 0xca
DCFG_SATA1LIODNR = 0x7f
DCFG_SATA2LIODNR = 0x80
DCFG_DMA1LIODNR = 0xc5
DCFG_DMA2LIODNR = 0xc6
DCFG_PAMUBYPENR = 0xf8000000
DCFG_DMACR1 = 0x0
DCFG_PMUXCR = 0x0
DCFG_DSRCID1A = 0x0
DCFG_DSRCID1B = 0x0
DCFG_DSRCID1C = 0x0
DCFG_DSRCID1D = 0x0
DCFG_DSRCID2A = 0x0
DCFG_DSRCID2B = 0x0
DCFG_IOVSELSR = 0x90000000
DCFG_DDRCLKDR = 0x0
DCFG_ELBCCLKDR = 0x0
DCFG_SDHCPCR = 0x0
DCFG_USBPCR = 0x0
====== ==== ==========
