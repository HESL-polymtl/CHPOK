#pragma once

typedef pok_bool_t jet_bool_t;

struct jet_pt_header_struct;

/** Тип указателя на дерево параметров */
typedef struct jet_pt_header_struct * jet_pt_tree_t;

/** Тип для представления идентификатора узла дерева */
typedef size_t jet_pt_node_t;

#define JET_PT_ROOT (jet_pt_node_t)(0)

/** Недопустимый идентификатор узла дерева */
#define JET_PT_INVALID_NODE (jet_pt_node_t)(-1)

/** Тип узла дерева */
typedef enum {
	JET_PT_STRING,	/**< Узел дерева содержит строковый параметр */
	JET_PT_INTEGER, /**< Узел дерева содержит целочисленный знаковый параметр */
	JET_PT_UNSIGNED, /**< Узел дерева содержит целочисленный без-знаковый параметр */
	JET_PT_FLOAT,   /**< Узел дерева содержит вещественный параметр */
	JET_PT_TREE,    /**< Узел является промежуточным в дереве. Не содержит значение */
	JET_PT_INVALID_NODE_TYPE /**< Недопустимый тип дерева */
} jet_pt_node_type_t;

/** Возвращает число дочерних узлов данного узла
 * 
 * 
 * @param tree Указатель на дерево параметров.
 * @param node Узел, для которого возвращается число дочерних узлов.
 * 
 * @return Число дочерних узлов заданного узла.
 * Если идентификатор узла не корректен, то возвращается 0.
 * Если заданный узел имеет не тип JET_PT_TREE, то возвращается 0.
 */
size_t jet_pt_children_count(jet_pt_tree_t tree, jet_pt_node_t node);

/** Возвращает заданный дочерний узел.
 * 
 * @param tree Указатель на дерево параметров.
 * @param node Узел, для которого возвращается дочерний узел.
 * @param num Номер дочернего узла. Дочерние узлы нумеруются, начиная с 0.
 * 
 * @return Заданный дочерний узел.
 * Если идентификатор узла не корректен, то возвращается JET_PT_INVALID_NODE.
 * Если заданный узел имеет не тип JET_PT_TREE, то возвращается JET_PT_INVALID_NODE.
 * Если у заданного узла меньше чем num дочерних, то возвращается JET_PT_INVALID_NODE.
 */
jet_pt_node_t jet_pt_get_child(jet_pt_tree_t tree, jet_pt_node_t node, size_t num);

/** Возвращает идентификатор узла дерева по текстовому пути в дереве.
 * 
 * Путь в дереве имеет вид "a/b/c" и разрешается относительно узла parent.
 * Знаки слэш (/) разделяют имена промежуточных узлов в пути.
 * 
 * @param tree Указатель на дерево параметров.
 * @param parent Узел, относительно которого ищется путь.
 * @param path Путь в дереве.
 * 
 * @pre path != NULL
 * @return Идентификатор узла дерева, соответствующего пути, или 
 *   JET_PT_INVALID_NODE если такой узел не существует.
 */
jet_pt_node_t jet_pt_find(jet_pt_tree_t tree, jet_pt_node_t parent, const char * path);

/** Возвращает имя узла.
 * 
 * @param tree Указатель на дерево параметров.
 * @param node Идентификатор узла в дереве.
 * 
 * @return указатель на строку с именем узла, если идентификатор узла корректен, и NULL в противном случае.
 */
const char* jet_pt_get_node_name(jet_pt_tree_t tree, jet_pt_node_t node);

/** Возвращает тип узла.
 * Если path != NULL, то узел задается с помощью родительского узла и пути относительно него по правилам,
 * данным в описании jet_pt_find().
 * Если path == NULL, то возвращается информация об узле parent.
 * 
 * @param tree Указатель на дерево параметров.
 * @param parent Идентификатор родительского или целевого узла.
 * @param path Путь относительно родительского узла или NULL.
 * 
 * @return тип узла, если целевой узел существует, и JET_PT_INVALID_NODE_TYPE в противном случае.
 */
jet_pt_node_type_t jet_pt_get_node_type(jet_pt_tree_t tree, jet_pt_node_t parent, const char* path);

/** Возвращает строковое значение, хранящееся в узле.
 * Если path != NULL, то узел задается с помощью родительского узла и пути относительно него по правилам,
 * данным в описании jet_pt_find().
 * Если path == NULL, то возвращается информация об узле parent.
 * 
 * @param tree Указатель на дерево параметров.
 * @param parent Идентификатор родительского или целевого узла.
 * @param path Путь относительно родительского узла или NULL.
 * 
 * @return строку, хранящуюся в узле.
 * Если целевой узел не существует или его тип не JET_PT_STRING, то возвращается NULL.
 */
const char* jet_get_string(jet_pt_tree_t tree, jet_pt_node_t parent, const char* path);

/** Извлекает целое знаковое число, хранящееся в узле.
 * Если path != NULL, то узел задается с помощью родительского узла и пути относительно него по правилам,
 * данным в описании jet_pt_find().
 * Если path == NULL, то извлекается содержимое узла parent.
 * 
 * @param tree Указатель на дерево параметров.
 * @param parent Идентификатор родительского или целевого узла.
 * @param path Путь относительно родительского узла или NULL.
 * @param result указатель на целочисленную переменную, в которую следует записать результат.

 * @pre result != NULL
 * 
 * @return 0 в случае успеха.
 * Если целевой узел не существует или его тип не JET_PT_INTEGER, то возвращается -1.
 * Если значение узла не может быть выражено 32-битным знаковым числом, то возвращается -1.
 */
int jet_pt_get_int32(jet_pt_tree_t tree, jet_pt_node_t parent, const char* path, int/*32_t*/* result);

/** Извлекает целое знаковое число, хранящееся в узле.
 * Если path != NULL, то узел задается с помощью родительского узла и пути относительно него по правилам,
 * данным в описании jet_pt_find().
 * Если path == NULL, то извлекается содержимое узла parent.
 * 
 * @param tree Указатель на дерево параметров.
 * @param parent Идентификатор родительского или целевого узла.
 * @param path Путь относительно родительского узла или NULL.
 * @param result указатель на целочисленную переменную, в которую следует записать результат.

 * @pre result != NULL
 * 
 * @return 0 в случае успеха.
 * Если целевой узел не существует или его тип не JET_PT_INTEGER, то возвращается -1.
 */
int jet_pt_get_int64(jet_pt_tree_t tree, jet_pt_node_t parent, const char* path, int64_t* result);

/** Извлекает целое беззнаковое число, хранящееся в узле.
 * Если path != NULL, то узел задается с помощью родительского узла и пути относительно него по правилам,
 * данным в описании jet_pt_find().
 * Если path == NULL, то извлекается содержимое узла parent.
 * 
 * @param tree Указатель на дерево параметров.
 * @param parent Идентификатор родительского или целевого узла.
 * @param path Путь относительно родительского узла или NULL.
 * @param result указатель на целочисленную переменную, в которую следует записать результат.

 * @pre result != NULL
 * 
 * @return 0 в случае успеха.
 * Если целевой узел не существует или его тип не JET_PT_INTEGER, то возвращается -1.
 * Если значение узла не может быть выражено 32-битным беззнаковым числом, то возвращается -1.
 */
int jet_pt_get_uint32(jet_pt_tree_t tree, jet_pt_node_t parent, const char* path, uint32_t* result);

/** Извлекает целое беззнаковое число, хранящееся в узле.
 * Если path != NULL, то узел задается с помощью родительского узла и пути относительно него по правилам,
 * данным в описании jet_pt_find().
 * Если path == NULL, то извлекается содержимое узла parent.
 * 
 * @param tree Указатель на дерево параметров.
 * @param parent Идентификатор родительского или целевого узла.
 * @param path Путь относительно родительского узла или NULL.
 * @param result указатель на целочисленную переменную, в которую следует записать результат.

 * @pre result != NULL
 * 
 * @return 0 в случае успеха.
 * Если целевой узел не существует или его тип не JET_PT_INTEGER, то возвращается -1.
 */
int jet_pt_get_uint64(jet_pt_tree_t tree, jet_pt_node_t parent, const char* path, uint64_t* result);

/** Извлекает вещественное число, хранящееся в узле.
 * Если path != NULL, то узел задается с помощью родительского узла и пути относительно него по правилам,
 * данным в описании jet_pt_find().
 * Если path == NULL, то извлекается содержимое узла parent.
 * 
 * @param tree Указатель на дерево параметров.
 * @param parent Идентификатор родительского или целевого узла.
 * @param path Путь относительно родительского узла или NULL.
 * @param result указатель на вещественную переменную, в которую следует записать результат.
 *
 * @pre result != NULL
 * 
 * @return 0 в случае успеха.
 * Если целевой узел не существует или его тип не JET_PT_FLOAT, то возвращается -1.
 */
int jet_pt_get_double(jet_pt_tree_t tree, jet_pt_node_t node, const char* path, double* result);

/** Извлекает вещественное число, хранящееся в узле.
 * При конвертации в float используется текуший режим округления.
 * Если path != NULL, то узел задается с помощью родительского узла и пути относительно него по правилам,
 * данным в описании jet_pt_find().
 * Если path == NULL, то извлекается содержимое узла parent.
 *
 * 
 * @param tree Указатель на дерево параметров.
 * @param parent Идентификатор родительского или целевого узла.
 * @param path Путь относительно родительского узла или NULL.
 * @param result указатель на вещественную переменную, в которую следует записать результат.
 *
 * @pre result != NULL
 * 
 * @return 0 в случае успеха.
 * Если целевой узел не существует или его тип не JET_PT_FLOAT, то возвращается -1.
 * Если значение узла не может быть выражено в виде float (при округлении к ближайшему представимому числу
 * получается значение "бесконечность" или 0, при том что исходное число не было в точности 0), то возвращается -1.
 */
int jet_pt_get_float(jet_pt_tree_t tree, jet_pt_node_t node, const char* path, float* result);
