#******************************************************************
#
# Institute for System Programming of the Russian Academy of Sciences
# Copyright (C) 2016 ISPRAS
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, Version 3.
#
# This program is distributed in the hope # that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the GNU General Public License version 3 for more details.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Import('libpok_env')

import sys
import os
sys.path.insert(1, os.path.join(os.environ["POK_PATH"], "misc"))
import generate_syscalls

libpok_env.Append(CPPPATH = libpok_env['POK_PATH']+'/build/libpok/include')

generate_syscall_user_command = libpok_env.Command(
    target = libpok_env['POK_PATH'] + 'build/libpok/include/pok/syscall_map_arinc.h',
    source = libpok_env["POK_PATH"] + 'kernel/include/uapi/syscall_map_arinc.h.in',
    action = generate_syscalls.generate_syscalls_declaration_user)

libpok_core = libpok_env.StaticObject(source = Glob('*.c'))
libpok_env.Depends(libpok_core, generate_syscall_user_command)

Return('libpok_core')

# EOF
