#******************************************************************
#
# Institute for System Programming of the Russian Academy of Sciences
# Copyright (C) 2016 ISPRAS
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, Version 3.
#
# This program is distributed in the hope # that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the GNU General Public License version 3 for more details.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Import('libpok_env')

Export('libpok_env')

user_objects = []

user_objects += SConscript('arch/SConscript')
user_objects += SConscript('arinc653/SConscript')
user_objects += SConscript('core/SConscript')
user_objects += SConscript('proptree/SConscript')
user_objects += SConscript('libc/SConscript')
user_objects += SConscript('libm/SConscript')
user_objects += SConscript('utils/SConscript')

if libpok_env.get('libpoktests'):
    libpok_env.Append(CPPPATH = [
        libpok_env['JETOS_UNITTESTS'] + '/mocks/libpok/',
        libpok_env['JETOS_UNITTESTS'] + '/unity/'
    ])

    user_objects += SConscript(libpok_env['JETOS_UNITTESTS'] + '/mocks/SConscript',
        variant_dir = 'mocks',
        duplicate = 0
    )

    user_objects += SConscript(libpok_env['JETOS_UNITTESTS'] + '/unity/SConscript',
        variant_dir = 'unity',
        duplicate = 0
    )

libpok_target = libpok_env.StaticLibrary(target = 'pok',
    source = user_objects)

def generate_uapi_headers():
    """
    Generate uapi headers (for user space).
    """
    source_dir = libpok_env["JETOS_HOME"] + '/kernel/include/uapi/'
    target_dir = libpok_env['JETOS_HOME'] + '/libpok/include/uapi/'

    # Read list of headers for copy by executing SConsctipt in <source_dir>
    (uapi_headers, uapi_headers_syscall) = SConscript(source_dir + 'SConscript')

    uapi_copy_headers = []
    for uapi_header in uapi_headers:
        uapi_copy_headers.extend(libpok_env.CopyWithTitle(
            target = target_dir + uapi_header,
            source = source_dir + uapi_header,
            title = template_generation.copy_title_c))

    user_syscall_headers = []
    for uapi_header_syscall in uapi_headers_syscall:
        user_syscall_headers.extend(libpok_env.BuildSyscallDefinition(
            target = target_dir + uapi_header_syscall,
            source = source_dir + uapi_header_syscall + '.in',
            template_file = libpok_env['JETOS_HOME'] + '/misc/templates/syscall_declarations_user_header.tpl',
            title = template_generation.generate_title_c
            ))

        uapi_code_syscall = uapi_header_syscall[:-2] + '.c'
        user_syscall_headers.extend(libpok_env.BuildSyscallDefinition(
            target = libpok_env['JETOS_HOME'] + '/libpok/core/' + uapi_code_syscall,
            source = source_dir + uapi_header_syscall + '.in',
            template_file = libpok_env['JETOS_HOME'] + '/misc/templates/syscall_declarations_user_source.tpl',
            title = template_generation.generate_title_c + '\n#include <core/syscall.h>\n'
            ))

    libpok_env.Depends('regenerate', user_syscall_headers + uapi_copy_headers)

    # Return something which will be stored globally.
    return user_syscall_headers + uapi_copy_headers

def generate_common_headers():
    """
    Generate user space headers from kernel ones.
    """
    source_dir = libpok_env["JETOS_HOME"] + '/kernel/include/'
    target_dir = libpok_env['JETOS_HOME'] + '/libpok/include/'

    common_header_names = [
        'proptree.h'
    ]

    common_headers = []
    for common_header_name in common_header_names:
        common_headers.extend(libpok_env.CopyWithTitle(
            target = target_dir + common_header_name,
            source = source_dir + common_header_name,
            title = template_generation.copy_title_c))

    libpok_env.Depends('regenerate', common_headers)

    # Return something which will be stored globally.
    return common_headers


if libpok_env.get('jdeveloper'):
    import sys
    import os
    sys.path.insert(1, os.path.join(os.environ["JETOS_HOME"], "misc"))
    import template_generation
    AddMethod(libpok_env, template_generation.BuildSyscallDefinition)
    AddMethod(libpok_env, template_generation.CopyWithTitle)

    # Generate uapi headers only once: they are stored into source dir,
    # which is the same for all partitions.
    #
    # Return value is ignored ('.c' files depends from '.h' files indirectly).
    libpok_env.getSharedTarget("libjet_uapi_headers", generate_uapi_headers)

    # Some user space headers are same as kernel ones
    # (but their are not for user-kernel interaction, as uapi headers).
    #
    # Copy them here.
    libpok_env.getSharedTarget("libjet_common_headers", generate_common_headers)

Return('libpok_target')
# EOF
