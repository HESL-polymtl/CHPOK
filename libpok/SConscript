#******************************************************************
#
# Institute for System Programming of the Russian Academy of Sciences
# Copyright (C) 2016 ISPRAS
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, Version 3.
#
# This program is distributed in the hope # that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the GNU General Public License version 3 for more details.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Import('env')

libpok_env = env.Clone()

libpok_env['CPPPATH'] = libpok_env['LIBPOK_CPPPATH']

Export('libpok_env')

arch        =  SConscript('arch/SConscript')
arinc653    =  SConscript('arinc653/SConscript')
core        =  SConscript('core/SConscript')
libc        =  SConscript('libc/SConscript')
libm        =  SConscript('libm/SConscript')
middleware  =  SConscript('middleware/SConscript')
protocols   =  SConscript('protocols/SConscript')
utils       =  SConscript('utils/SConscript')
libprop     =  SConscript('libprop/SConscript')

user_objects = [arch, arinc653, core, libc, libm, middleware, protocols, utils, libprop]

libpok_env.StaticLibrary(target = 'pok',
    source = user_objects)

if libpok_env.get('jdeveloper'):
    import sys
    import os
    sys.path.insert(1, os.path.join(os.environ["POK_PATH"], "misc"))
    import template_generation
    AddMethod(libpok_env, template_generation.BuildSyscallDefinition)

    source_dir = libpok_env["POK_PATH"] + '/kernel/include/uapi/'
    target_dir = libpok_env['POK_PATH'] + '/libpok/include/uapi/'

    # Read list of headers for copy by executing SConsctipt in <source_dir>
    (uapi_headers, uapi_headers_syscall) = SConscript(source_dir + 'SConscript')

    libpok_env.Append(
        SOURCE_BASE_DIR = libpok_env['POK_PATH'],
        GENERATE_TITLE = template_generation.generate_title_c,
        COPY_TITLE = template_generation.copy_title_c
    )

    uapi_copy_headers = []
    for uapi_header in uapi_headers:
        uapi_copy_headers.extend(libpok_env.Command(
            target = target_dir + uapi_header,
            source = source_dir + uapi_header,
            action = template_generation.CopyWithTitle))

    user_syscall_headers = []
    for uapi_header_syscall in uapi_headers_syscall:
        user_syscall_headers.extend(libpok_env.BuildSyscallDefinition(
            target = target_dir + uapi_header_syscall,
            source = source_dir + uapi_header_syscall + '.in',
            template_main = 'syscall_declarations_user',
            template_dir = libpok_env['POK_PATH'] + '/misc/templates'))

    jet_headers = libpok_env.Alias('jet-headers', user_syscall_headers + uapi_copy_headers)

    libpok_env.Depends(user_objects, jet_headers)

# EOF
