#******************************************************************
#
# Institute for System Programming of the Russian Academy of Sciences
# Copyright (C) 2016 ISPRAS
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, Version 3.
#
# This program is distributed in the hope # that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the GNU General Public License version 3 for more details.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

Import('part_env')
part_env.SystemPartition()

part_env['PARTITION_SOURCES'] = [Glob('src/*.c')]
part_env['PARTITION_XML'] = 'config_gen.xml'

import os

COMPONENTS_DIR = os.path.join(part_env['JETOS_HOME'], "syspart/components")
COMPONENTS_LIST = [
        'arinc',
        'udp_ip',
        'mac',
        'virtio',
        'arp',
        'ppc_dtsec'
        ]

CONFIG_FILE = "glue_config.yaml"

COMPONENTS_CONFIGS = [os.path.join(COMPONENTS_DIR, comp, "config.yaml") for comp in COMPONENTS_LIST]

Import('part_env')

P2_env = part_env.Clone()

for comp in COMPONENTS_LIST:
    P2_env.Append(CPPPATH = os.path.join(COMPONENTS_DIR, comp))


from collections import defaultdict
def get_port_arrays_dict(config):
    res_dict = defaultdict(dict)
    for link in config['links']:
        if 'array_index' in link['from']:
            instance_name = link['from']['instance']
            port_name = link['from']['port']
            array_index = int(link['from']['array_index'])

            per_instance_dict = res_dict[instance_name]
            port_max_index = max(per_instance_dict.get(port_name, 0), array_index)
            per_instance_dict[port_name] = port_max_index

    #print(res_dict)
    return res_dict

def get_glue_definitions(source, env):
    config = yaml.load(open(source[0].abspath))
    return { 'instances': config['instances'],
        'links': config['links'],
        'port_array_dict': get_port_arrays_dict(config)
        }

def grouped_instances(instances):
    """
    instances - is list of instances (from glue config.yaml).
    Returns dictionary where key is component (instance type) and value is a list of name of
    its instances
    """
    res = defaultdict(list)
    for instance in instances:
        res[instance['type']].append(instance['name'])
    return res

def gen_context_for_xml(source, env):
    glue_config = yaml.load(open(source[0].abspath))

    components_configs = []
    for s in source[1:]:
        components_configs += yaml.load(open(s.abspath))

    return {'components': components_configs,
            'components_instances': grouped_instances(glue_config['instances'])
            }

def generate_glue():
    cwd = part_env.Dir('.').srcnode().abspath

    t = part_env.TemplateRender(
        target = os.path.join(cwd, "config_gen.xml"),
        source = [os.path.join(cwd, CONFIG_FILE)] + COMPONENTS_CONFIGS,
        create_context = gen_context_for_xml,
        template_file = os.path.join(part_env['JETOS_HOME'],"misc/templates") + "/glue_config.xml.tpl",
        title = template_generation.generate_title_xml
        )
    part_env.Depends(GLUE_DEFAULT_TARGET, t)

    t = part_env.TemplateRender(
        target = os.path.join(cwd, "glue_main_gen.c"),
        source = os.path.join(cwd, CONFIG_FILE),
        create_context = get_glue_definitions,
        template_file = os.path.join(part_env['JETOS_HOME'],"misc/templates") + "/glue.c.tpl",
        title = template_generation.generate_title_c
        )
    part_env.Depends(GLUE_DEFAULT_TARGET, t)


if part_env.get('cdeveloper'):
    import sys
    import yaml
    import glob
    sys.path.insert(1, os.path.join(part_env["JETOS_HOME"], "misc"))
    import template_generation
    AddMethod(part_env, template_generation.TemplateRender)

    GLUE_DEFAULT_TARGET = part_env.Command( "#/generate_glue_files", [], '')
    Default(GLUE_DEFAULT_TARGET)

    generate_glue()

objs = []
sources = Glob('*.c')
for src in sources:
    objs += P2_env.StaticObject(src)

part_env['PARTITION_SOURCES'].extend(objs)

