# -*- Mode: Python -*-

import os
import shutil

Import('env')

env.Program(target = env['BUILD_DIR']+'kernel.lo', source = [
env['POK_PATH']+'/build/'+env['BSP']+'/kernel/core.lo',
env['POK_PATH']+'/build/'+env['BSP']+'/boards/bsp.lo',
env['BUILD_DIR']+'deployment.c'])

pok_env = env.Clone()
pok_env.Append(CPPPATH = pok_env['POK_PATH']+'/kernel/include')

ldscript = pok_env['POK_PATH']+'/boards/'+pok_env['BSP']+'/ldscripts/kernel.lds'
pok_env['LINKFLAGS'] = str(' -T '+ldscript+' -Map build/'+pok_env['BSP']+'/pok.elf.map')

# there should (perhaps) also be padding to get aligned file size
def merge_partitions(target, source, env):
	with open(str(target[0]), 'wb') as part:
		for s in source:
			with open(str(s), 'rb') as orig_part:
				shutil.copyfileobj(orig_part, part)

def create_sizes_c(target, source, env):
	with open(str(target[0]), 'w') as sizes:
		sizes.write('#include <types.h>\n')
		sizes.write('uint32_t pok_elf_sizes[] = {\n')
		for s in source:
			part_size = os.path.getsize(str(s))
			if part_size > pok_env['MAX_PART_SIZE']:
				raise RuntimeError('Partition size must not exceed %d bytes' % pok_env['MAX_PART_SIZE'])
			sizes.write(str(part_size))
			if source.index(s) != len(source) - 1:
				sizes.write(',\n')
		sizes.write('\n};\n')

for i in range(len(pok_env['PARTITION_BUILD_DIRS'])):
	part_dir = os.path.join(pok_env['SCONSTRUCT_DIR'], pok_env['PARTITION_DIRS'][i])
	part_build_dir = os.path.join(pok_env['SCONSTRUCT_DIR'], pok_env['PARTITION_BUILD_DIRS'][i])
	if not os.path.exists(part_build_dir+'part.elf'):
		SConscript(env['POK_PATH']+'/misc/SConscript_partition', exports = ['part_dir', 'part_build_dir'])

merge_command = pok_env.Command(target = pok_env['BUILD_DIR']+'partitions.bin',
source = pok_env['PARTITIONS'],
action = merge_partitions)
pok_env.Depends(merge_command, pok_env['PARTITIONS'])

sizes_c_command = pok_env.Command(target = pok_env['BUILD_DIR']+'sizes.c',
source = pok_env['PARTITIONS'],
action = create_sizes_c)
pok_env.Depends(sizes_c_command, pok_env['PARTITIONS'])

compile_sizes = pok_env.Command(target = pok_env['BUILD_DIR']+'sizes.o',
source = pok_env['BUILD_DIR']+'sizes.c',
action = [
pok_env['CC']+' -c -o '+pok_env['BUILD_DIR']+'sizes.o '+pok_env['CFLAGS']+' -I'+pok_env['POK_PATH']+'/kernel/include '+
pok_env['BUILD_DIR']+'sizes.c',
pok_env['OBJCOPY']+' --add-section .archive2='+pok_env['BUILD_DIR']+'partitions.bin '+pok_env['BUILD_DIR']+'sizes.o'])
pok_env.Depends(compile_sizes, pok_env['PARTITIONS'])

pok_target = pok_env.Program(target = pok_env['BUILD_DIR']+'pok.elf', source = [
pok_env['BUILD_DIR']+'sizes.o',
pok_env['BUILD_DIR']+'kernel.lo',
pok_env['LIBGCC']])
pok_env.Depends(pok_target, [compile_sizes, ldscript])

# EOF
