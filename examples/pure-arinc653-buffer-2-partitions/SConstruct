# -*- Mode: Python -*-

import sys
import os

sys.path.insert(1, os.path.join(os.environ["POK_PATH"], "misc"))
import arinc653_xml_conf

import chpok_configuration
import xml.etree.ElementTree as ET

boards = ['e500mc', 'e500_highmem', 'p3041', 'x86-qemu']

vars = Variables()
vars.AddVariables(
	('xml', 'xml config to be passed to parser', 'config.xml'),
    EnumVariable('bsp', 'bsp', 'e500_highmem', allowed_values = boards)
)

env = Environment(variables = vars, ENV = os.environ)

Help(vars.GenerateHelpText(env))

env['POK_PATH'] = os.path.join(os.environ['POK_PATH'], '')
env['SCONSTRUCT_DIR'] = Dir('.').abspath

part_root = ET.parse('part_config.xml')
root = ET.parse(env['xml'])

parser = arinc653_xml_conf.ArincConfigParser()
conf = parser.parse(part_root, root)

env['PARTITION_DIRS'] = list(part.name for part in conf.partitions)
env['PARTITIONS'] = list(os.path.join(part_dir, 'part.elf') for part_dir in env['PARTITION_DIRS'])

# this prevents config writing when we don't need to build
if not COMMAND_LINE_TARGETS and not env.GetOption('clean') and not env.GetOption('help'):
    chpok_configuration.write_configuration(conf, 'kernel', env['PARTITION_DIRS'])

Export('env')

SConscript(env['POK_PATH']+'/misc/SConscript')

env.Append(QEMU_FLAGS = ' -kernel pok.elf')

# uncomment this line if you want to use gdb
#env.Append(QEMU_FLAGS = ' -S -s')

#env.Append(QEMU_FLAGS = ' -display none')
#env.Append(QEMU_FLAGS = ' -monitor tcp::4444,server,nowait')

env.Command('run', [], env['QEMU']+env['QEMU_FLAGS'])
env.Ignore('.', 'run')

env.Command('debug', [], env['GDB']+' pok.elf -ex "target remote :1234"')
env.Ignore('.', 'debug')

env.Clean('chpok', [env['POK_PATH']+'/build/'+bsp for bsp in boards])
env.Clean('local', [
'kernel/deployment.c',
'kernel/deployment.o',
'kernel/kernel.lo',
'P1/main.o',
'P1/deployment.c',
'P1/deployment.o',
'P1/part.elf',
'P2/main.o',
'P2/deployment.c',
'P2/deployment.o',
'P2/part.elf',
'partitions.bin',
'sizes.c',
'sizes.o',
'pok.elf'])

# EOF
