# -*- Mode: Python -*-

from __future__ import print_function

import sys
import os

sys.path.insert(1, os.path.join(os.environ["POK_PATH"], "misc"))
import arinc653_xml_conf
import itertools

import chpok_configuration
import xml.etree.ElementTree as ET

def print_cmd_line(s, target, src, env):
	# s is the original command line, target and src are lists of target
	# and source nodes respectively, and env is the environment.
	sys.stdout.write("Making %s...\n" %(' and '.join([str(x) for x in target])))

def sconscript():
	SConscript('kernel/SConscript')
	SConscript(env['POK_PATH']+'/kernel/SConscript')
	SConscript(env['POK_PATH']+'/libpok/SConscript')
	SConscript('pr1/SConscript')
	SConscript('SConscript')

vars = Variables()
vars.AddVariables(
	('directory', 'directory', './'),
	('xml', 'xml config to be passed to parser', 'config.xml')
)

env = Environment(variables = vars, ENV = os.environ)

#env['PRINT_CMD_LINE_FUNC'] = print_cmd_line

env['POK_PATH'] = os.environ['POK_PATH']
env['CPPPATH'] = [env['POK_PATH']+'/kernel/include']

env['PARTITIONS'] = ['pr1/pr1.elf']

env['ARCH'] = 'ppc'
env['BSP'] = 'e500mc'

env['AR'] = 'powerpc-elf-ar'
env['CC'] = 'powerpc-elf-gcc'
env['LINKFLAGS'] = '-r'
env['ELF_MODE'] = 'elf_i386'
env['INSTRUMENTATION'] = '0'
env['LINK'] = 'powerpc-elf-ld'
env['OBJCOPY'] = 'powerpc-elf-objcopy'
env['OBJDUMP'] = 'powerpc-elf-objdump'
env['RANLIB'] = 'powerpc-elf-ranlib'

env['QEMU_ppc'] = 'qemu-system-ppc'
env.Append(QEMU_MISC = '-serial file:/dev/stdout -s -S')
env['QEMU'] = './qemu_wrapper.py' + env['QEMU_ppc']

env['CFLAGS'] = '-std=gnu99 -iwithprefix include -DPOK_ARCH_PPC -Wall -g -O -Wuninitialized \
 -ffreestanding -nostdlib -nostdinc -mregnames -mcpu=e500mc \
 -D__POK_C__ -DPOK_CONFIG_OPTIMIZE_FOR_GENERATED_CODE=1'
env['ASFLAGS'] = env['CFLAGS']

env['LIBGCC'] = '/home/alex/workspace/powerpc-elf-4.9.1-Linux-x86_64/lib/gcc/powerpc-elf/4.9.1/libgcc.a'

Export('env')

partition_dirs = (os.path.join(env['directory'], "pr%d" % i) for i in itertools.count(1))
partition_dirs = list(itertools.islice(partition_dirs, 255)) # XXX limited to 255 partitions right now
kernel_dir = os.path.join(env['directory'], "kernel")

root = ET.parse(env['xml'])

parser = arinc653_xml_conf.ArincConfigParser()
conf = parser.parse(root)

chpok_configuration.write_configuration(conf, kernel_dir, partition_dirs)
	
sconscript()

# EOF
