# -*- Mode: Python -*-

import sys
import os
import itertools

sys.path.insert(1, os.path.join(os.environ["POK_PATH"], "misc"))
import arinc653_xml_conf

import chpok_configuration
import xml.etree.ElementTree as ET

vars = Variables()
vars.AddVariables(
	('xml', 'xml config to be passed to parser', 'config.xml'),
	EnumVariable('arch', 'architecture', 'ppc', allowed_values = ('ppc', 'x86'))
)

env = Environment(variables = vars, ENV = os.environ)

Help(vars.GenerateHelpText(env))

env['POK_PATH'] = os.path.join(os.environ['POK_PATH'], '')
env['PARTITIONS'] = ['pr1/pr1.elf']
env['SCONSTRUCT_DIR'] = Dir('.').abspath

Export('env')

partition_dirs = ("pr%d" % i for i in itertools.count(1))
partition_dirs = list(itertools.islice(partition_dirs, 255)) # XXX limited to 255 partitions right now

root = ET.parse(env['xml'])

parser = arinc653_xml_conf.ArincConfigParser()
conf = parser.parse(root)

chpok_configuration.write_configuration(conf, 'kernel', partition_dirs)

SConscript(env['POK_PATH']+'/misc/SConscript')

# uncomment this line if you want to use gdb
#env.Append(QEMU_FLAGS = ' -S -s')

#env.Append(QEMU_FLAGS = ' -display none')

env.Command('run', [], env['QEMU']+env['QEMU_FLAGS'])
env.Ignore('.', 'run')

env.Command('debug', [], env['GDB']+' pok.elf -ex "target remote :1234"')
env.Ignore('.', 'debug')

env.Clean('chpok', [env['POK_PATH']+'/build/ppc', env['POK_PATH']+'/build/x86'])
env.Clean('local', [
'kernel/deployment.o',
'kernel/kernel.lo',
'pr1/main.o',
'pr1/deployment.o',
'pr1/libpart.a',
'pr1/pr1.elf',
'partitions.bin',
'sizes.c',
'sizes.o',
'pok.elf'])

# EOF
