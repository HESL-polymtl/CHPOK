#******************************************************************
#
# Institute for System Programming of the Russian Academy of Sciences
# Copyright (C) 2016 ISPRAS
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, Version 3.
#
# This program is distributed in the hope # that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the GNU General Public License version 3 for more details.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

import sys
import os

from lxml import etree
import arinc653_xml_conf
import chpok_configuration
import template_generation

Import('env')

AddMethod(env, template_generation.TemplateRender)

def get_pok_partition_definitions(source, env):
    if type(source) is list:
        source = source[0]

    root = etree.parse(source.path)

    parser = arinc653_xml_conf.ArincConfigParser()

	conf = chpok_configuration.Configuration()
	parser.parse_partition(conf, root))

    return dict(conf=conf)


root = etree.parse(os.path.join(env['SCONSTRUCT_DIR'], env['xml']))
parser = arinc653_xml_conf.ArincConfigParser()
conf = chpok_configuration.Configuration()
part = parser.parse_partition(root)
conf.partitions.append(part)

env.Command('clean_cmd', [], Delete('build/'))
env.Alias('clean', 'clean_cmd')

# this prevents config writing when we don't need to build
if not COMMAND_LINE_TARGETS and not env.GetOption('clean') and not env.GetOption('help'):
	if not os.path.exists(env['BUILD_DIR']):
		os.makedirs(env['BUILD_DIR'])

	env.Append(GENERATE_TITLE = template_generation.generate_title_c_no_track)

	env.TemplateRender(
        target = os.path.join(env['BUILD_DIR'], "deployment.c"),
        source = os.path.join(env['SCONSTRUCT_DIR'], env['xml']),
        create_definitions_func = get_pok_partition_definitions,
        template_main = "deployment_user",
        template_dir = env['POK_PATH'] + "/misc/templates"
        )


part_dir = os.path.join(env['SCONSTRUCT_DIR'], '')
part_build_dir = os.path.join(env['SCONSTRUCT_DIR'], env['BUILD_DIR'])

part_is_system = part.is_system
SConscript('SConscript_partition', exports = ['part_dir', 'part_build_dir', 'part_is_system'])

# EOF
