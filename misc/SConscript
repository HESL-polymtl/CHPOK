#******************************************************************
#
# Institute for System Programming of the Russian Academy of Sciences
# Copyright (C) 2016 ISPRAS
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, Version 3.
#
# This program is distributed in the hope # that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the GNU General Public License version 3 for more details.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

import sys
import os

def print_cmd_line(s, target, src, env):
    # s is the original command line, target and src are lists of target
    # and source nodes respectively, and env is the environment.
    global log_file_opened
    if not log_file_opened and str(target[0]) != 'run':
        open(env['SCONSTRUCT_DIR']+'/scons_build.log', 'w')
        log_file_opened = True

    if str(target[0]) != 'run':
        with open(env['SCONSTRUCT_DIR']+'/scons_build.log', 'a') as log:
                log.write("%s\n"%s)

    # For now len is always 1
    if len(target) == 1:
        x = str(target[0])
        sys.stdout.write("%s ...\n" % os.path.relpath(x, start=env['POK_PATH']))
    else:
        sys.stdout.write("Making %s...\n" %(' and '.join([str(x) for x in target])))

try:
    Import('env')
except:
    boards = ['e500mc', 'e500_highmem', 'p3041', 'x86-qemu']
    default_board = 'e500mc'

    vars = Variables()
    vars.AddVariables(
        ('xml', 'xml config to be passed to parser', 'config.xml'),
        EnumVariable('bsp', 'bsp', default_board, allowed_values = boards),
        BoolVariable('jdeveloper', 'Enables developer mode', 0)
    )

    env = Environment(variables = vars, ENV = os.environ)

    Help(vars.GenerateHelpText(env))

    # If bsp isn't specified on the command line,
    # try to get it from bash environment
    #if 'bsp' not in COMMAND_LINE_TARGETS:
    if ARGUMENTS.get('bsp'):
        env['BSP'] = env['bsp']
    else:
        try:
            env['BSP'] = os.environ['POK_BSP']
        except:
            env['BSP'] = env['bsp']

    env['POK_PATH'] = os.path.join(os.environ['POK_PATH'], '')
    env['SCONSTRUCT_DIR'] = GetLaunchDir()
    env['BUILD_DIR'] = os.path.join(env['SCONSTRUCT_DIR'], 'build', env['BSP'], '')

log_file_opened = False

# This tells scons to store all file signatures 
# in a separate .sconsign file in each directory
SConsignFile(None)

# Cache built files
#CacheDir(env['POK_PATH']+'/cache')

# Flags common for all architectures
env['PRINT_CMD_LINE_FUNC'] = print_cmd_line
env['LINKFLAGS'] = '-r'
env['QEMU_FLAGS'] = ' -serial stdio'
# 16 MBytes
env['MAX_PART_SIZE'] = 16 * 2**20

# Architecture-dependent parameters
bsp_arch_dict = {
    'e500mc':          'ppc',
    'e500_highmem':    'ppc',
    'p3041':           'ppc',
    'x86-qemu':        'x86'
}
env['ARCH'] = bsp_arch_dict[env['BSP']]

env['KERNEL_CPPPATH'] = [
    env['POK_PATH']+'/kernel/include',
    env['POK_PATH']+'/kernel/arch/' + env['ARCH'] + '/include',
    env['POK_PATH']+'/boards/' + env['BSP'] + '/include',
]

env['LIBPOK_CPPPATH'] = [
    env['POK_PATH']+'/libpok/include',
    env['POK_PATH']+'/libpok/arch/' + env['ARCH'] + '/include',
]


arch_prefix_dict = {
    'ppc':    'powerpc-elf-',
    'x86':    'i386-elf-'
}

arch_gdb_dict = {
    'ppc':    'powerpc-elf-gdb',
    'x86':    'i386-elf-gdb'
}

arch_qemu_dict = {
    'ppc':    'qemu-system-ppc',
    'x86':    'qemu-system-i386'
}

tools_dict = {
    'PREFIX':    arch_prefix_dict,
    'GDB':       arch_gdb_dict,
    'QEMU':      arch_qemu_dict
}

# These might be specified as Linux environment variables
tools = ['PREFIX', 'GDB', 'QEMU']

for tool in tools:
    try:
        env[tool] = os.environ[tool]
    except:
        env[tool] = tools_dict[tool][env['ARCH']]

# These depend only on prefix
env['AR']      = env['PREFIX'] + 'ar'
env['CC']      = env['PREFIX'] + 'gcc'
env['LINK']    = env['PREFIX'] + 'ld'
env['OBJCOPY'] = env['PREFIX'] + 'objcopy'
env['OBJDUMP'] = env['PREFIX'] + 'objdump'
env['RANLIB']  = env['PREFIX'] + 'ranlib'

env['LIBGCC'] = os.popen(env['CC']+' -print-libgcc-file-name').read().replace('\n', '')

Import('cflags')
env['CFLAGS'] = '-std=gnu99 -iwithprefix include -Wall -Wuninitialized -ffreestanding -nostdlib -nostdinc -g '
env.Append(CFLAGS = cflags)

cflags_arch_dict = {
    'ppc':    ' -O0 -mregnames',
    'x86':    ' -Og'
}
env.Append(CFLAGS = cflags_arch_dict[env['ARCH']])

env['ASFLAGS'] = env['CFLAGS']

bsp_cpu_dict = {
    'e500mc':          ' -mcpu=e500mc',
    'e500_highmem':    ' -mcpu=e500mc',
    'p3041':           ' -mcpu=e500mc',
    'x86-qemu':        ''
}
env.Append(CFLAGS = bsp_cpu_dict[env['BSP']])

# Additional compile flags for kernel-only
arch_kernel_flags_dict = {
    'ppc':    '-msoft-float',
}

env['CFLAGS_KERNEL'] = arch_kernel_flags_dict.get(env['ARCH'], "")

bsp_qemu_dict = {
    'e500mc':          ' -M ppce500 -cpu e500mc',
    'e500_highmem':    ' -M ppce500 -cpu e500mc',
    'p3041':           ' -M ppce500 -cpu e500mc',
    'x86-qemu':        ''
}
env.Append(QEMU_FLAGS = bsp_qemu_dict[env['BSP']])

env.Append(QEMU_FLAGS = ' -kernel '+env['BUILD_DIR']+'pok.elf')

#env.Append(QEMU_FLAGS = ' -display none')

env.Command('run_cmd', [], env['QEMU']+env['QEMU_FLAGS'])
env.Alias('run', 'run_cmd')

env.Command('run_tap_cmd', [], env['QEMU'] + env['QEMU_FLAGS'] + ' -net nic,model=virtio -net tap,ifname=tap0,script=no,downscript=no')
env.Alias('run-tap', 'run_tap_cmd')

env.Command('run_tap_cmd_ne2k', [], env['QEMU'] + env['QEMU_FLAGS'] + ' -net nic,model=ne2k_pci,vlan=0 -net nic,model=ne2k_pci,vlan=1 -net tap,ifname=tap0,script=no,downscript=no,vlan=0, -net tap,ifname=tap1,script=no,downscript=no,vlan=1')
env.Alias('run-tap-ne2k', 'run_tap_cmd_ne2k')

env.Command('run_with_2_ports', [], env['QEMU']+env['QEMU_FLAGS']+' -serial tcp::8000,server')
env.Alias('run-gdb', 'run_with_2_ports')

env.Command('run_debug_cmd', [], [
env.Append(QEMU_FLAGS = ' -S -s'),
env['QEMU']+env['QEMU_FLAGS']])
env.Alias('rundbg', 'run_debug_cmd')

env.Command('debug_cmd', [], env['GDB']+' '+env['BUILD_DIR']+'pok.elf -ex "target remote :1234"')
env.Alias('debug', 'debug_cmd')

gdb_commands_file = env['BUILD_DIR'] + '/GDB_commands'
command_debug_gdb = env.Command('debug_gdb', [gdb_commands_file,], env['GDB']+' '+env['BUILD_DIR']+'pok.elf -ex "source '+gdb_commands_file+'" \
                                                                            -ex "target extended-remote 127.0.0.1:8000"')
env.Alias('debug-gdb', 'debug_gdb')

Export('env')

SConscript('../boards/SConscript', variant_dir = '../build/'+env['BSP']+'/boards', duplicate = 0)
SConscript('../kernel/SConscript', variant_dir = '../build/'+env['BSP']+'/kernel', duplicate = 0)
SConscript('../libpok/SConscript', variant_dir = '../build/'+env['BSP']+'/libpok', duplicate = 0)
SConscript('../syspart/SConscript', variant_dir = '../build/'+env['BSP']+'/syspart', duplicate = 0)

# EOF
