# -*- Mode: Python -*-

import sys
import os

def print_cmd_line(s, target, src, env):
    # s is the original command line, target and src are lists of target
    # and source nodes respectively, and env is the environment.

    with open(env['SCONSTRUCT_DIR']+'/scons_build.log', 'a') as log:
        log.write("%s\n"%s)

    # For now len is always 1
    if len(target) == 1:
        x = str(target[0])
        sys.stdout.write("%s ...\n" % os.path.relpath(x, start=env['POK_PATH']))
    else:
        sys.stdout.write("Making %s...\n" %(' and '.join([str(x) for x in target])))

boards = ['e500mc', 'e500_highmem', 'p3041', 'x86-qemu']

vars = Variables()
vars.AddVariables(
    ('xml', 'xml config to be passed to parser', 'config.xml'),
    EnumVariable('bsp', 'bsp', 'e500_highmem', allowed_values = boards)
)

env = Environment(variables = vars, ENV = os.environ)

Help(vars.GenerateHelpText(env))

env['POK_PATH'] = os.path.join(os.environ['POK_PATH'], '')
env['SCONSTRUCT_DIR'] = GetLaunchDir()

open(env['SCONSTRUCT_DIR']+'/scons_build.log', 'w')

# This tells scons to store all file signatures 
# in a separate .sconsign file in each directory
SConsignFile(None)

# Cache built files
CacheDir(env['POK_PATH']+'/cache')

# Flags common for all architectures
env['PRINT_CMD_LINE_FUNC'] = print_cmd_line
env['CPPPATH'] = [env['POK_PATH']+'/kernel/include']
env['LINKFLAGS'] = '-r'
env['QEMU_FLAGS'] = ' -serial stdio'
env['BSP'] = env['bsp']
# 16 MBytes
env['MAX_PART_SIZE'] = 16 * 2**20

bsp_arch_dict = {
    'e500mc':          'ppc',
    'e500_highmem':    'ppc',
    'p3041':           'ppc',
    'x86-qemu':        'x86'
}
env['ARCH'] = bsp_arch_dict[env['BSP']]

arch_prefix_dict = {
    'ppc':    'powerpc-elf-',
    'x86':    'i386-elf-'
}
env['PREFIX'] = arch_prefix_dict[env['ARCH']]

tools = ['AR', 'CC', 'LINK', 'OBJCOPY', 'OBJDUMP', 'RANLIB', 'GDB']

tools_dict = {
    'AR':         'ar',
    'CC':         'gcc',
    'LINK':       'ld',
    'OBJCOPY':    'objcopy',
    'OBJDUMP':    'objdump',
    'RANLIB':     'ranlib',
    'GDB':        'gdb',
}

for tool in tools:
    try:
        env[tool] = os.environ[tool]
    except:
        env[tool] = env['PREFIX'] + tools_dict[tool]

if env['ARCH'] == 'ppc':
    # ppc-specific flags
    env['CFLAGS'] = '-std=gnu99 -iwithprefix include -Wall -g -O0 -Wuninitialized \
        -ffreestanding -nostdlib -nostdinc -mregnames'
    env['QEMU'] = 'qemu-system-ppc'

elif env['ARCH'] == 'x86':
    # x86-specific flags
    env['CFLAGS'] = '-std=gnu99 -iwithprefix include -Wall -g -Og -Wuninitialized \
        -ffreestanding -nostdlib -nostdinc'
    env['QEMU'] = 'qemu-system-i386'

env['ASFLAGS'] = env['CFLAGS']
env['LIBGCC'] = os.popen(env['CC']+' -print-libgcc-file-name').read().replace('\n', '')

bsp_cpu_dict = {
    'e500mc':          ' -mcpu=e500mc',
    'e500_highmem':    ' -mcpu=e500mc',
    'p3041':           ' -mcpu=e500mc',
    'x86-qemu':        ''
}
env.Append(CFLAGS = bsp_cpu_dict[env['BSP']])

bsp_qemu_dict = {
    'e500mc':          ' -M ppce500 -cpu e500mc',
    'e500_highmem':    ' -M ppce500 -cpu e500mc',
    'p3041':           ' -M ppce500 -cpu e500mc',
    'x86-qemu':        ''
}
env.Append(QEMU_FLAGS = bsp_qemu_dict[env['BSP']])

env['BUILD_DIR'] = os.path.join(env['SCONSTRUCT_DIR'], 'build', env['bsp'], '')
env.Append(QEMU_FLAGS = ' -kernel '+env['BUILD_DIR']+'pok.elf')

#env.Append(QEMU_FLAGS = ' -display none')
#env.Append(QEMU_FLAGS = ' -monitor tcp::4444,server,nowait')

env.Command('run_cmd', [], env['QEMU']+env['QEMU_FLAGS'])
env.Alias('run', 'run_cmd')

env.Command('run_debug_cmd', [], [
env.Append(QEMU_FLAGS = ' -S -s'),
env['QEMU']+env['QEMU_FLAGS']])
env.Alias('rundbg', 'run_debug_cmd')

env.Command('debug_cmd', [], env['GDB']+' '+env['BUILD_DIR']+'pok.elf -ex "target remote :1234"')
env.Alias('debug', 'debug_cmd')

Export('env')

SConscript('../boards/SConscript', variant_dir = '../build/'+env['BSP']+'/boards', duplicate = 0)
SConscript('../kernel/SConscript', variant_dir = '../build/'+env['BSP']+'/kernel', duplicate = 0)
SConscript('../libpok/SConscript', variant_dir = '../build/'+env['BSP']+'/libpok', duplicate = 0)

# EOF
