#******************************************************************
#
# Institute for System Programming of the Russian Academy of Sciences
# Copyright (C) 2016 ISPRAS
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, Version 3.
#
# This program is distributed in the hope # that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the GNU General Public License version 3 for more details.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

"""
Depended on 'mode' parameter, provide targets for build either
whole module or a single partition.
In the case of the module additional commands are created for run this
module or debug it.
"""
 
# Expects 'POK_PATH' os environment variable to point to the parent dir.
# (so the script itself is located at '$POK_PATH/misc/SConscript').
#
# Expects 'bsp' parameter of the scons call or `POK_BSP` os environment
# variable to contain BSP for build against.
#
# Creates environment 'env' and fills global arch-independent parameters
# of it.
#
# Then calls script located at boards/<BSP>/SConscript and pass 'env' to it.
# This bsp-specific script should/may fill environment variables:
# 
# - 'ARCH' - target architecture, corresponded to given BSP.
# (String, required).
#
# - 'PREFIX' - prefix of toolchain tools used for compile, link, etc.
# (String, required).
#
# - 'GDB' - gdb executable for debug. If absent, PREFIX'ed version is used.
# (String/path, optional).
#
# - 'QEMU' - qemu executable for run.
# (String/path, required).
#
# - 'QEMU_FLAGS' - flags for run qemu.
# (Space-separated string, required).
#
# - 'CFLAGS' - may append additional flags for compile "C" sources.
#
# - 'CFLAGS_KERNEL' - may append additional flags for compile "C" sources
# for kernel space.
#
# - 'AFLAGS' - may append additional flags for compile asm sources.
#
#
#
# (including arch-specific ones). Then Import()s 'environment_data'
# variable, and assign it to env['ENVIRONMENT_DATA'].
#
# Then 'Import()'s 'mode' variable.
#
# If value of 'mode' variable is equal to 'module', 'Import()'s variable
# 'module_def' and execute script 'SConscript_module', passing this
# variable to it alongside with the environment ('env').
#
# If value of 'mode' variable is equal to 'partition', 'Import()'s variable
# 'partition_def' and execute script 'SConscript_partition' passing this variable
# to it alongside with the *cloned* environment ('part_env').
#
# Script Return()s environment, which has been passed to subscript
# ('env' if mode == 'module', 'part_env' if mode == 'partition').

import sys
import os

def print_cmd_line(s, target, src, env):
    # s is the original command line, target and src are lists of target
    # and source nodes respectively, and env is the environment.
    global log_file_opened
    if not log_file_opened and str(target[0]) != 'run':
        open(env['LAUNCHDIR']+'/scons_build.log', 'w')
        log_file_opened = True

    if str(target[0]) != 'run':
        with open(env['LAUNCHDIR']+'/scons_build.log', 'a') as log:
                log.write("%s\n"%s)

    # For now len is always 1
    if len(target) == 1:
        x = str(target[0])
        sys.stdout.write("%s ...\n" % os.path.relpath(x, start=env['POK_PATH']))
    else:
        sys.stdout.write("Making %s...\n" %(' and '.join([str(x) for x in target])))

boards = ['e500mc', 'e500_highmem', 'p3041', 'x86-qemu']
default_board = 'e500mc'

vars = Variables()
vars.AddVariables(
	EnumVariable('bsp', 'bsp', default_board, allowed_values = boards),
	BoolVariable('jdeveloper', 'Enables developer mode', 0),
	BoolVariable('cdeveloper', 'Enables component developer mode', 0)
)

env = Environment(variables = vars, ENV = os.environ)

Help(vars.GenerateHelpText(env))

# If bsp isn't specified on the command line,
# try to get it from bash environment
if ARGUMENTS.get('bsp'):
	env['BSP'] = env['bsp']
else:
	try:
		env['BSP'] = os.environ['POK_BSP']
	except:
		env['BSP'] = env['bsp']

env['POK_PATH'] = os.path.join(os.environ['POK_PATH'], '')
env['LAUNCHDIR'] = GetLaunchDir()

log_file_opened = False

# This tells scons to store all file signatures 
# in a separate .sconsign file in each directory
SConsignFile(None)

# Cache built files
#CacheDir(env['POK_PATH']+'/cache')

# Flags common for all architectures
env['PRINT_CMD_LINE_FUNC'] = print_cmd_line
# Linker flags for '.lo' objects, but not for '.elf'
env['LINKFLAGS'] = '-r'
env['QEMU_FLAGS'] = ' -serial stdio'
# 16 MBytes
env['MAX_PART_SIZE'] = 16 * 2**20

env['CFLAGS'] = '-std=gnu99 -iwithprefix include -Wall -Wuninitialized -ffreestanding -nostdlib -nostdinc -g '

env['ASFLAGS'] = env['CFLAGS']

SConscript(os.path.join(env['POK_PATH'], 'misc/boards', env['BSP'], 'SConscript'),
	exports = 'env')

env['KERNEL_CPPPATH'] = [
    env['POK_PATH']+'/kernel/include',
    env['POK_PATH']+'/kernel/arch/' + env['ARCH'] + '/include',
    env['POK_PATH']+'/boards/' + env['BSP'] + '/include',
]

env['LIBPOK_CPPPATH'] = [
    env['POK_PATH']+'/libpok/include',
    env['POK_PATH']+'/libpok/arch/' + env['ARCH'] + '/include',
]

# These might be specified as Linux environment variables
tools = ['PREFIX', 'GDB', 'QEMU']

for tool in tools:
    tool_val = os.environ.get(tool, "")
    if tool_val != "":
        env[tool] = tool_val

# These depend only on prefix
env['AR']      = env['PREFIX'] + 'ar'
env['CC']      = env['PREFIX'] + 'gcc'
env['LINK']    = env['PREFIX'] + 'ld'
env['OBJCOPY'] = env['PREFIX'] + 'objcopy'
env['OBJDUMP'] = env['PREFIX'] + 'objdump'
env['RANLIB']  = env['PREFIX'] + 'ranlib'

# 'GDB' may be already set by environment, so check it before set according to the prefix.
gdb_val = env.get('GDB', None)
if gdb_val is None:
    env['GDB'] = env['PREFIX'] + 'gdb'

env['LIBGCC'] = os.popen(env['CC']+' -print-libgcc-file-name').read().replace('\n', '')

if env.get('jdeveloper'):
    # Fake command for suppress "Nothing to be done" for alias target.
    env.Command('regenerate-command', [], "")
    env.Alias('regenerate', 'regenerate-command')

import SCons.Node.Alias
if env.GetOption('help'):
    aliases = SCons.Node.Alias.default_ans.keys()
    aliases.sort()

    print('---------------')
    print('Alias list:')
    for x in aliases:
        print(x)
    print('---------------')

def KernelEnvironment(env):
	"""
	Create fresh kernel environment from the main one.
	"""
	kernel_env = env.Clone()
	kernel_env['CPPPATH'] = env['KERNEL_CPPPATH']
	kernel_env.Append(CFLAGS = ' ' + env.get('CFLAGS_KERNEL', default = ''))
	return kernel_env

def PartitionEnvironment(env):
	"""
	Create fresh partition's environment from the main one.
	"""
	part_env = env.Clone()
	part_env['CPPPATH'] = env['LIBPOK_CPPPATH']
	part_env.Append(CFLAGS = ' -include '+ part_env['POK_PATH']+'libpok/include/config.h')
	return part_env

env.AddMethod(KernelEnvironment)
env.AddMethod(PartitionEnvironment)

def RemoveDirectories(env, target, dirs):
	"""
	Create target $target which removes given directories, if them exist.
	"""
	if type(dirs) is not list:
		dirs = [dirs]

	# Currently command line for all scons commands a unconditionally replaced
	# in print_cmd_line.
	# So do not bother with pretty command line of given command.
	return env.Command(target, [], Delete(dirs))

env.AddMethod(RemoveDirectories)

Import('environment_data')
env['ENVIRONMENT_DATA'] = environment_data

Import('mode')

if mode == 'module':
	# Kernel-space targets are needed only for build whole module
	env['BSP_TARGET'] = SConscript('../boards/SConscript', exports = 'env', variant_dir = '../build/'+env['BSP']+'/boards', duplicate = 0)
	env['KERNEL_CORE_TARGET'] = SConscript('../kernel/SConscript', exports = 'env', variant_dir = '../build/'+env['BSP']+'/kernel', duplicate = 0)
	
# Libpok is needed for any partition.
env['LIBPOK_TARGET'] = SConscript('../libpok/SConscript', exports = 'env', variant_dir = '../build/'+env['BSP']+'/libpok', duplicate = 0)
# Syspart may be needed for some partition.
# If it is not, the target just isn't built.
env['SYSPART_TARGET'] = SConscript('../syspart/SConscript', exports = 'env', variant_dir = '../build/'+env['BSP']+'/syspart', duplicate = 0)


if mode == 'module':
    Import('module_def')
    mod_elf = SConscript('SConscript_module', exports = ['module_def', 'env'])
    Default(mod_elf)
    ret_env = env
elif mode == 'partition':
    Import('partition_def')
    part_env = env.PartitionEnvironment()
    part_elf = SConscript('SConscript_partition', exports = ['partition_def', 'part_env'])
    Default(part_elf)
    ret_env = part_env
else:
    print "Error: Invalid value for 'mode' parameter for the main SConscript: " + str(mode)
    print "Should be 'module' or 'partition'"
    raise RuntimeError("Invalid 'mode' parameter")

clean_directories = [env['POK_PATH'] + '/build']

env.RemoveDirectories('clean_os_cmd', clean_directories)
env.Alias('distclean', 'clean_os_cmd')
env.Clean('#/all', clean_directories)

Return('ret_env')
# EOF
