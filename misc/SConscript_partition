#******************************************************************
#
# Institute for System Programming of the Russian Academy of Sciences
# Copyright (C) 2016 ISPRAS
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, Version 3.
#
# This program is distributed in the hope # that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the GNU General Public License version 3 for more details.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

"""
Build single partition according to definition script.
"""

# This script may be called either from SConscript, when it builds single
# partition, or from SConscript_module for every partition.
#
# The script Import()s variable 'part_env' contained clone of the main
# environment and prepare it for build user-space components. When script
# is called as a part of the module's building process, environment
# variable part_env['PARTITION_INDEX'] contains index of the partition
# (counted from 0), otherwise this variable is not set.
#
# After that, it Import()s variable 'partition_def' and execute script,
# pointed by it. That script setups 'part_env' variables,
# whichs determine partition components and configuration:
#
# - 'BUILD_DIR' - where partition's elf should be built.
# (Absolute path).
#
# - 'CLEAN_DIRS' - which directories should be clean on `scons -c local`.
# (Absolute path or list of absolute paths; by default equal to BUILD_DIR).
#
#
# - 'XML' - xml or other file(s), from which configuration of partition
# may be extracted.
# (Single absolute path or list of absolute paths).
#
# - 'PARSE_CONFIGURATION' - parser of files listed in 'XML', which should
# return object of type 'chpok_configuration.Partition'.
# (Function with signature '(sources, part_env)').
#
# - 'PARTITION_SOURCES' - list of files, from which partition should be
# built. Any file may be source file, contained the code, or object one,
# obtained with part_env.StaticObject().
# (List of absolute paths).
#
# - 'SYSTEM_PARTITION' - if set to true-evaluated value, the partition is
# linked with system partition library.
#
# Script pointed by 'partition_def' may check variable
# part_env['PARTITION_INDEX'] for differentiate modes (single partition
# or the whole module) and for extract partition's index in the second case.
#
# Return target which builds partition's elf.

import os

from lxml import etree
import arinc653_xml_conf
import chpok_configuration
import template_generation

Import('part_env')
Import('partition_def')

SConscript(partition_def, exports = 'part_env')

part_build_dir = part_env['BUILD_DIR']

#part_env.Command('clean_cmd', [], Delete('build/'))
#part_env.Alias('clean', 'clean_cmd')

AddMethod(part_env, template_generation.TemplateRender)

def get_pok_partition_definitions(source, part_env):
    return dict(part = part_env['PARSE_CONFIGURATION'](source, part_env))

deployment_target = part_env.TemplateRender(
    target = os.path.join(part_build_dir, "deployment.c"),
    source = part_env['XML'],
    create_definitions_func = get_pok_partition_definitions,
    template_main = "deployment_user",
    template_dir = part_env['POK_PATH'] + "/misc/templates"
    )

part_elf_env = part_env.Clone()

ldscript_partition = part_env['LDSCRIPT_PARTITION']
# Rewrite LINKFLAGS, as we build '.elf'.
part_elf_env['LINKFLAGS'] = ' -T ' + ldscript_partition

syspart_target = []
if part_env.get('SYSTEM_PARTITION', default = False):
	syspart_target.append(part_env['SYSPART_TARGET'])

part_elf = part_elf_env.Program(target = part_build_dir+'/part.elf',
	source = deployment_target
		+ syspart_target
		+ part_env['PARTITION_SOURCES']
		+ part_env['LIBPOK_TARGET']
		+ [part_env['LIBGCC']])

part_elf_env.Depends(part_elf, ldscript_partition)


part_clean_dir = part_env.get('CLEAN_DIRS', part_build_dir)
if type(part_clean_dir) is not list:
	part_clean_dir = [part_clean_dir]

if 'part_index' in part_env:
	# If build as a part of the module, SConscript_module cares about
	# deletion of partition's build directory.
	pass
else:
	part_env.RemoveDirectories('part_clean_cmd', part_clean_dir)
	part_env.Alias('clean', 'part_clean_cmd')
	part_env.Alias('distclean', 'part_clean_cmd')
	part_env.Clean('#/local', part_clean_dir)
	part_env.Clean('#/all', part_clean_dir)

Return('part_elf')

# EOF
