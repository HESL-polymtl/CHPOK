#******************************************************************
#
# Institute for System Programming of the Russian Academy of Sciences
# Copyright (C) 2016 ISPRAS
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, Version 3.
#
# This program is distributed in the hope # that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the GNU General Public License version 3 for more details.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

import os

from lxml import etree
import arinc653_xml_conf
import chpok_configuration

Import('env')
Import('part_dir')
Import('part_build_dir')
Import('src_dir')
Import('part_xml')

def get_pok_partition_definitions(source, env):
    if type(source) is list:
        source = source[0]

    root = etree.parse(source.path)

    parser = arinc653_xml_conf.ArincConfigParser()

    conf = chpok_configuration.Configuration()
    parser.parse_partition(conf, root)

    return dict(part = conf.partitions[0])

env.TemplateRender(
    target = os.path.join(part_build_dir, "deployment.c"),
    source = os.path.join(part_dir, part_xml),
    create_definitions_func = get_pok_partition_definitions,
    template_main = "deployment_user",
    template_dir = env['POK_PATH'] + "/misc/templates"
    )

root = etree.parse(os.path.join(part_dir, part_xml))
definition_attrib = root.find("Definition").attrib
part_is_system = ("System" in definition_attrib) and (arinc653_xml_conf.parse_bool(definition_attrib["System"]))

part_env = env.Clone()
part_env['CPPPATH'] = [part_env['POK_PATH']+'libpok/include']

if part_is_system:
    part_env.Append(CPPPATH = part_env['POK_PATH']+'/syspart/include')
    part_env.Append(CPPPATH = part_env['POK_PATH']+'/build/libpok/include')

part_env.Append(CFLAGS = ' -include '+part_env['POK_PATH']+'libpok/include/config.h')

ldscript = part_env['POK_PATH']+'boards/'+part_env['BSP']+'/ldscripts/partition.lds'
part_env['LINKFLAGS'] = str(' -T '+ldscript+' -Map '+part_build_dir+'part.elf.map')

libpok = part_env['POK_PATH']+'build/'+part_env['BSP']+'/libpok/libpok.a'

syspart_lo = []
if part_is_system:
    syspart_lo = part_env['POK_PATH']+'build/'+part_env['BSP']+'/syspart/syspart.lo'

VariantDir(part_build_dir, src_dir, duplicate = 0)

part_elf = part_env.Program(target = part_build_dir+'part.elf', source = [
Glob(part_build_dir+'*.c'),
syspart_lo,
libpok,
part_env['LIBGCC']])
part_env.Depends(part_elf, ldscript)

part_env.Depends(part_elf, part_build_dir + "deployment.c")

Return('part_elf')

# EOF
