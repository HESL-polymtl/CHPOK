#******************************************************************
#
# Institute for System Programming of the Russian Academy of Sciences
# Copyright (C) 2016 ISPRAS
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, Version 3.
#
# This program is distributed in the hope # that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the GNU General Public License version 3 for more details.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

"""
Common sconscript which may be used for build example partition.
"""

#
# Accept scons parameters:
#
#  bsp - specifies BSP for build.
#
#  jdeveloper - enables developer mode.
#
#  cdeveloper - enables component developer mode for system partition
#
#
# Environment variables which affects on building:
#
#  JETOS_BSP - specified BSP for build (if 'bsp' scons parameter is absent)
#
#  PREFIX - prefix for compile tools, replaces architecture-dependent one
#
#  GDB - gdb executable, replaces architecture-dependent one
#
#  QEMU - qemu executable, replaces architecture-dependent one
#
#
# Assume source directory to be '#' (that is, location of SConstruct
# from which given script has been called, directly or indirectly).
#
# SConscript, located in the source directory, should set following
# variables for 'Import()'ed environment 'part_env':
#
#  'PARTITION_SOURCES' - list of sources (.c, .o, .lo, etc.) files,
#  from which partition should be built.
#
#  'PARTITION_XML' - xml-file in a specific format.
#
# SConscript also may modify following variables in 'part_env':
#
#  'CFLAGS', 'ASFLAGS' - these flags would affect on compilation of every
#


import os
from lxml import etree
import arinc653_xml_conf
import chpok_configuration

boards = ['e500mc', 'e500_highmem', 'p3041', 'x86-qemu']

vars = Variables()
vars.AddVariables(
	EnumVariable('bsp', 'bsp', None, allowed_values = boards),
	BoolVariable('jdeveloper', 'Enables developer mode', 0),
	BoolVariable('cdeveloper', 'Enables component developer mode', 0)
)

env = Environment(variables = vars, ENV = os.environ)
Help(vars.GenerateHelpText(env))

os_scons_vars_map = {
	'JETOS_BSP': 'BSP',
	'PREFIX': 'PREFIX',
	'GDB': 'GDB',
	'QEMU': 'QEMU'
}

for os_var in os_scons_vars_map.keys():
	val = os.environ.get(os_var, None)
	if val is not None:
		env[os_scons_vars_map[os_var]] = val

scons_param_bsp = env.get('bsp', None)

if scons_param_bsp is not None:
	env['BSP'] = scons_param_bsp

if not 'BSP' in env:
	print "ERROR: BSP variable is not set."
	print "HINT: You may set BSP via environment variable JETOS_BSP or via scons parameter 'bsp'."
	Exit(1)

def get_jet_partition_config(source, env):
    if type(source) is list:
        source = source[0]

    root = etree.parse(source.path)

    parser = arinc653_xml_conf.ArincConfigParser(env['ARCH'])

    conf = chpok_configuration.Configuration(env['ARCH'])
    parser.parse_partition(conf, root)

    return conf.partitions[0]

env['PARTITION_PARSE_CONFIGURATION'] = get_jet_partition_config

part_example_dir = Dir('#').abspath

env['PARTITION_SOURCE_DIR'] = part_example_dir
env['PARTITION_BUILD_DIR'] = os.path.join(part_example_dir, 'build', env['BSP'])
env['PARTITION_CLEAN_DIRS'] = os.path.join(part_example_dir, 'build')
env['PARTITION_SOURCES'] = []

def partition_post_process(part_env):
	part_env['PARTITION_XML'] = part_env.toAbsPath(part_env['PARTITION_XML'],
		part_env['PARTITION_SOURCE_DIR'])
	root = etree.parse(part_env['PARTITION_XML'])
	definition_attrib = root.find("Definition").attrib
	part_is_system = ("System" in definition_attrib) and (arinc653_xml_conf.parse_bool(definition_attrib["System"]))

	if part_is_system:
		part_env.Append(CPPPATH = part_env['JETOS_HOME']+'/syspart/include')
		part_env['PARTITION_IS_SYSTEM'] = True

env['PARTITION_POST_PROCESS'] = partition_post_process

mode = 'partition'
part_env = SConscript('SConscript', exports = ['mode', 'env'])

import SCons.Node.Alias
if env.GetOption('help'):
    aliases = SCons.Node.Alias.default_ans.keys()
    aliases.sort()

    print('---------------')
    print('Alias list:')
    for x in aliases:
        print(x)
    print('---------------')

Return("part_env")
