Scripts for build JetOS against specific board.


Each subdirectory corresponds to board with the same name and should
contain:

1. 'SConscript'.

SCons script file which is called from 'misc/SConscript'.
This script should import SCons environment 'env' via

   Import('env')

and should fill some environment variables in it:

 - 'ARCH' - target architecture, corresponded to given BSP.
 (String, required).

 - 'PREFIX' - prefix of toolchain tools used for compile, link, etc.
 (String, required).

 - 'BOARD_DEPLOY' - function, which is called as

    f(env, memory_definitions_file, memory_constraints)

 where

   -- 'memory_definitions_file' - path to the file, where memory
   definitions (see 'memory_definitions.py') should be stored
   (via serialization);

   -- 'memory_costraints' - single-element list contained 'SCons.Node'
   object referred to the file with memory constraints (see 'memory_definitions.py').

   The function should define rule which for given *memory constraints*
   creates *memory definitions*.

   Note, that *memory constraints* doesn't define memory blocks for
   partitions' code and data, contained in partitions' elf files.
   But *memory definitions* should define such blocks.

   The function may define rule(s) for create board-specific deployment file(s),
   and append these file(s) to env['BOARD_DEPLOYMENT_SOURCES'], so these
   files will be compiled into the resulted module object.

   The function may use environment variables:

   --- 'MODULE_BUILD_DIR' - where additional files should be created.
   --- 'PARTITIONS_ELF_MAP' - mapping from partition's name into
                              partition's elf file.

   There are two identical sources of physical memory limit, requested by the module:
   --- one defined in memory constraints (for use in rules),
   --- one defined in 'BOARD_PHYS_SIZE' environment variable
           (for use by the function itself).
   In case of non-emulated targets this limit is garanteed to be
   less-or-equal than board memory size.
   In case of emulated target module's limit of physical memory may be
   more than its initial value, but the function may return error if that
   cannot be emulated.
   In any case, this limit should be enforced in deployment.

 - 'GDB' - gdb executable for debug. If absent, PREFIX'ed version is used.
 (String/path, optional).

 - 'BOARD_PHYS_SIZE' - size of physical memory on the board.
   This size is used in memory constraints generated for the module.

   For Qemu-boards (see BOARD_IS_EMULATED below) this size is used when
   run module under Qemu. For Qemu-boards default value is 128Mb

   This size may be changed by module definition script(see description
   of 'BOARD_DEPLOY' function above).
 (Integer, required for non-Qemu boards).

 - BSP_PROPERTIES_FILE - file which contains "key = value" definitions for given BSP.

 - 'BOARD_IS_EMULATED' - whether given board can be emulated using qemu.
 For emulated board scons targets for running module are automatically
 generated.
 (Boolean, optional)

 - 'QEMU' - qemu executable for run.
 Used only for emulated boards (see description for BOARD_IS_EMULATED above).
 (String/path, required if BOARD_IS_EMULATED is true).

 - 'QEMU_FLAGS' - flags for run qemu.
 Used only for emulated boards (see description for BOARD_IS_EMULATED above).
 (Space-separated string, required if BOARD_IS_EMULATED is true).

 - 'CFLAGS' - may append additional flags for compile "C" sources.

 - 'CFLAGS_KERNEL' - may append additional flags for compile "C" sources
 for kernel space.

 - 'AFLAGS' - may append additional flags for compile asm sources.
