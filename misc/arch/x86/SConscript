#******************************************************************
#
# Institute for System Programming of the Russian Academy of Sciences
# Copyright (C) 2016 ISPRAS
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, Version 3.
#
# This program is distributed in the hope # that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the GNU General Public License version 3 for more details.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

"""
Environment definitions for x86 architecture.
"""
from __future__ import division

import os
import memory_definition
import template_generation
from text_serialization import *
import elf_info

Import('env')

env['PREFIX'] = 'i386-elf-'

env['QEMU'] = 'qemu-system-i386'

env['LDSCRIPT_KERNEL'] = env['JETOS_HOME'] + '/boards/' + env['BSP'] + '/ldscripts/kernel.lds'
env['LDSCRIPT_PARTITION'] = env['JETOS_HOME'] + '/boards/' + env['BSP'] + '/ldscripts/partition.lds'

arch_dir = Dir('.').srcnode().abspath

# Below is an implementation of arch deployment functionality.
def align_val(val, align):
    return ((val + align - 1) // align) * align

class SegmentX86(SerializableObject):
    yaml_tag = '!SegmentX86'

    copy_slots = [
        'paddr',
        'size',
    ]

    def __init__(self, **kargs):
        copy_constructor(self, kargs)

# Simple allocator of x86 segments
class SegmentX86Allocator:
    def __init__(self, phys_start, phys_end):
        self.phys_current = phys_start
        self.phys_end = phys_end

    def alloc_segment(self, size):
        """
        Allocate x86 segment in the physical memory and return it.

        Return None if failed to allocate segment (reason will be printed).
        """

        #if size >= 2**20:
            # Such sizes are encoded using 4K granularity, so need to align size.
        size = align_val(size, 4096)

        # Always align physical address of the segment on 4K.
        phys_start_segment = align_val(self.phys_current, 4096)

        segment = SegmentX86(
            paddr = phys_start_segment,
            size = size,
        )

        phys_new = phys_start_segment + size

        if phys_new > self.phys_end:
            print "Insufficient physical memory for add segment."
            return None

        self.phys_current = phys_new

        return segment

def x86_deploy_func(env, target, source):
    mc = memory_definition.ModuleMemoryDefinition.load_from_file(source[0].abspath)

    x86_segments = []
    x86_segment_allocator = SegmentX86Allocator(
        phys_start = 64 * 2**20,
        phys_end = mc.phys_total)

    for pmc in mc.partitions:
        # Whole partition as single segment. We have no other choice.

        # First create memory blocks for elf segments.
        elf_memory_blocks = [] # This will be appended to pmc.memory_blocks later.

        segments = elf_info.elf_read_segments(env, env['PARTITIONS_ELF_MAP'][pmc.name])

        # Maximum vaddr used in elf (will be computed)
        vaddr_end = 0

        for i, segment in enumerate(segments):
            elf_mbd = memory_definition.MemoryBlockDefinition(
                name = '.ELF.' + str(i),
                size = segment.MemSiz,
                align = segment.Align,
                vaddr = segment.VirtAddr,
                access = segment.memory_block_access()
            )

            elf_memory_blocks.append(elf_mbd)

            # Update vaddr_end if needed.
            segment_end = segment.VirtAddr + segment.MemSiz
            if segment_end > vaddr_end:
                vaddr_end = segment_end

        x86_segment_size = vaddr_end

        for mbd in pmc.memory_blocks:
            if mbd.vaddr != None:
                print "Partition '%s' has memory block '%s' with fixed virtual address. This feature is not supported." % (pmc.name, mbd.name)
                return 1
            if mbd.paddr != None:
                print "Partition '%s' has memory block '%s' with fixed physical address. This feature is not supported." % (pmc.name, mbd.name)
                return 1

            if mbd.is_shared:
                print "Memory block '%s' is shared. This feature is not supported.." % (pmc.name, mbd.name)
                return 1

            if mbd.cache_policy != "DEFAULT":
                print "Memory block '%s' has non-default cache policy '%s'. This feature is not supported." % (pmc.name, mbd.name, mbd.cache_policy)
                return 1

            if mbd.align > 2 ** 31:
                print "Memory block '%s' has too high alignment: %x." % (mbd.name, mbd.align)
                return 1

            x86_segment_size = align_val(x86_segment_size, mbd.align)

            mbd.vaddr = x86_segment_size

            x86_segment_size += mbd.size

        pmc.memory_blocks.extend(elf_memory_blocks)

        x86_segment = x86_segment_allocator.alloc_segment(x86_segment_size)

        if x86_segment is None:
            return 1

        x86_segments.append(x86_segment)

        # Setup kaddr for all memory blocks, including ELF ones.
        for mbd in pmc.memory_blocks:
            mbd.kaddr = mbd.vaddr + x86_segment.paddr

    mc.save_to_file(target[0].abspath)

    serialize_as_text(x86_segments, target[1].abspath, 'segments')

def x86_create_definitions_for_deployment(source, env):
    segments = deserialize_from_text(source[0].abspath, 'segments')

    return {'segments': segments}

def x86_deploy(env, memory_definitions_file, memory_constraints):

    arch_deployment_kernel_yaml = os.path.join(env['MODULE_BUILD_DIR'], "x86_segments.yaml")

    env.Command(target = [memory_definitions_file, arch_deployment_kernel_yaml],
        source = memory_constraints,
        action = Action(x86_deploy_func, '$ARCH_DEPLOY_FUNC_COMSTR')
    )

    env.Depends([memory_definitions_file, arch_deployment_kernel_yaml],
        env['PARTITIONS_ELF_MAP'].values())

    env.AddMethod(template_generation.TemplateRender)

    env['BOARD_DEPLOYMENT_SOURCES'] += env.TemplateRender(
        target = os.path.join(env['MODULE_BUILD_DIR'], "x86_segments.c"),
        source = arch_deployment_kernel_yaml,
        create_definitions_func = x86_create_definitions_for_deployment,
        template_main = "x86_segments_c",
        template_dir = arch_dir + "/templates"
    )

env['BOARD_DEPLOY'] = x86_deploy
