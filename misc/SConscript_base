#******************************************************************
#
# Institute for System Programming of the Russian Academy of Sciences
# Copyright (C) 2016 ISPRAS
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, Version 3.
#
# This program is distributed in the hope # that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the GNU General Public License version 3 for more details.
#
#-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

import os
import shutil

from lxml import etree
import arinc653_xml_conf
import chpok_configuration
import template_generation

Import('env')

AddMethod(env, template_generation.TemplateRender)

def get_pok_definitions(source, env):
    source = source[0]

    root = etree.parse(source.path)
    root.xinclude()

    parser = arinc653_xml_conf.ArincConfigParser(env['ARCH'])
    conf = parser.parse(root)

    return dict(conf=conf)

def get_pok_partition_definitions(source, env):
    source = source[0]

    root = etree.parse(source.path)
    root.xinclude()

    parser = arinc653_xml_conf.ArincConfigParser(env['ARCH'])
    conf = chpok_configuration.Configuration(env['ARCH'])
    parser.parse_partition(conf, root)

    return dict(part = conf.partitions[0])

def get_pok_gdb_definitions(source, env):
	defs = get_pok_definitions(source, env)

	defs['partition_build_dirs'] = env['PARTITION_BUILD_DIRS']

	return defs


root = etree.parse(os.path.join(env['SCONSTRUCT_DIR'], env['xml']))
root.xinclude()
parser = arinc653_xml_conf.ArincConfigParser(env['ARCH'])
conf_layout = parser.parse_layout(root)

env['PARTITION_DIRS'] = list(part.name for part in conf_layout)
env['PARTITION_IS_SYSTEM'] = list(part.is_system for part in conf_layout)
env['PARTITIONS'] = list(os.path.join(env['SCONSTRUCT_DIR'], part_dir, 'build',
					env['BSP'], 'part.elf') for part_dir in env['PARTITION_DIRS'])

env['PARTITION_BUILD_DIRS'] = []
for i in range(len(env['PARTITION_DIRS'])):
	env['PARTITION_BUILD_DIRS'].append(os.path.join(env['SCONSTRUCT_DIR'], env['PARTITION_DIRS'][i], 'build', env['BSP'], ''))

env.Command('clean_cmd', [], Delete(['build/']+[pdir+'/build' for pdir in env['PARTITION_DIRS']]))
env.Alias('clean', 'clean_cmd')

build_dir = env['BUILD_DIR']
partition_build_dirs = env['PARTITION_BUILD_DIRS']

if not os.path.exists(build_dir):
	os.makedirs(build_dir)
for pdir in partition_build_dirs:
	if not os.path.exists(pdir):
		os.makedirs(pdir)

env.Append(GENERATE_TITLE = template_generation.generate_title_c_no_track)

# Generate "deployment.c" for kernel
env.TemplateRender(
	target = os.path.join(build_dir, "deployment.c"),
	source = [os.path.join(env['SCONSTRUCT_DIR'], env['xml'])] +
		[os.path.join(env['SCONSTRUCT_DIR'], part_dir, env['xml']) for part_dir in partition_build_dirs],
	create_definitions_func = get_pok_definitions,
	template_main = "deployment_kernel",
	template_dir = env['POK_PATH'] + "/misc/templates"
	)

# Generate "deployment.c" for every user partition
for part_dir in partition_build_dirs:
	env.TemplateRender(
		target = os.path.join(part_dir, "deployment.c"),
		source = os.path.join(env['SCONSTRUCT_DIR'], part_dir, env['xml']),
		create_definitions_func = get_pok_partition_definitions,
		template_main = "deployment_user",
		template_dir = env['POK_PATH'] + "/misc/templates"
		)

# Generate file with commands for GDB for possible debugging
env.TemplateRender(
	target = build_dir + "/GDB_commands",
	source = [os.path.join(env['SCONSTRUCT_DIR'], env['xml'])] +
		[os.path.join(env['SCONSTRUCT_DIR'], part_dir, env['xml']) for part_dir in partition_build_dirs],
	create_definitions_func = get_pok_gdb_definitions,
	template_main = "GDB_commands",
	template_dir = env['POK_PATH'] + "/misc/templates",
	GENERATE_TITLE = template_generation.generate_title_python
	)

pok_env = env.Clone()

env.Append(CPPPATH = env['KERNEL_CPPPATH'])

env.Program(target = env['BUILD_DIR']+'kernel.lo', source = [
env['POK_PATH']+'/build/'+env['BSP']+'/kernel/core.lo',
env['POK_PATH']+'/build/'+env['BSP']+'/boards/bsp.lo',
env['BUILD_DIR']+'deployment.c',
env['BUILD_DIR']+'TLB.c',
env['BUILD_DIR']+'TLB1.c'])

ldscript = pok_env['POK_PATH']+'/boards/'+pok_env['BSP']+'/ldscripts/kernel.lds'
pok_env['LINKFLAGS'] = str(' -T '+ldscript+' -Map build/'+pok_env['BSP']+'/pok.elf.map')

# there should (perhaps) also be padding to get aligned file size
def merge_partitions(target, source, env):
	with open(str(target[0]), 'wb') as part:
		for s in source:
			with open(str(s), 'rb') as orig_part:
				shutil.copyfileobj(orig_part, part)

def create_sizes_c(target, source, env):
	with open(str(target[0]), 'w') as sizes:
		sizes.write('#include <types.h>\n')
		sizes.write('uint32_t pok_elf_sizes[] = {\n')
		for s in source:
			part_size = os.path.getsize(str(s))
			if part_size > pok_env['MAX_PART_SIZE']:
				raise RuntimeError('Partition size must not exceed %d bytes' % pok_env['MAX_PART_SIZE'])
			sizes.write(str(part_size))
			if source.index(s) != len(source) - 1:
				sizes.write(',\n')
		sizes.write('\n};\n')

for i in range(len(pok_env['PARTITION_BUILD_DIRS'])):
    part_dir = os.path.join(pok_env['SCONSTRUCT_DIR'], pok_env['PARTITION_DIRS'][i])
    part_build_dir = os.path.join(pok_env['SCONSTRUCT_DIR'], pok_env['PARTITION_BUILD_DIRS'][i])
    part_is_system = pok_env['PARTITION_IS_SYSTEM'][i]
    if any(f.endswith('.c') for f in os.listdir(part_dir)):
        SConscript('SConscript_partition', exports = ['part_dir', 'part_build_dir', 'part_is_system'])

import all_cr
print (env['PARTITION_BUILD_DIRS'])
tlb_create_command = pok_env.Command(target = pok_env['BUILD_DIR']+'TLB.c',
source = pok_env['PARTITIONS'],
action = all_cr.create)
pok_env.Depends(tlb_create_command, pok_env['PARTITIONS'])

merge_command = pok_env.Command(target = pok_env['BUILD_DIR']+'partitions.bin',
source = pok_env['PARTITIONS'],
action = merge_partitions)
pok_env.Depends(merge_command, pok_env['PARTITIONS'])

sizes_c_command = pok_env.Command(target = pok_env['BUILD_DIR']+'sizes.c',
source = pok_env['PARTITIONS'],
action = create_sizes_c)
pok_env.Depends(sizes_c_command, pok_env['PARTITIONS'])

compile_sizes = pok_env.Command(target = pok_env['BUILD_DIR']+'sizes.o',
source = pok_env['BUILD_DIR']+'sizes.c',
action = [
pok_env['CC']+' -c -o '+pok_env['BUILD_DIR']+'sizes.o '+pok_env['CFLAGS']+' -I'+pok_env['POK_PATH']+'/kernel/include '+
pok_env['BUILD_DIR']+'sizes.c',
pok_env['OBJCOPY']+' --add-section .archive2='+pok_env['BUILD_DIR']+'partitions.bin '+pok_env['BUILD_DIR']+'sizes.o'])
pok_env.Depends(compile_sizes, pok_env['PARTITIONS'])

pok_target = pok_env.Program(target = pok_env['BUILD_DIR']+'pok.elf', source = [
pok_env['BUILD_DIR']+'sizes.o',
pok_env['BUILD_DIR']+'kernel.lo',
pok_env['LIBGCC']])
pok_env.Depends(pok_target, [compile_sizes, ldscript])

# EOF
